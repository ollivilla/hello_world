# implementation of card game - Memory

import simplegui
import random

deck = range(8) + range(8)
random.shuffle(deck)
exposed = []

# assign all values  to False in exposed list
for i in range(len(deck)): 
    exposed.append(False)

print deck

# helper function to initialize globals
def new_game():
    global cardsOpen
    cardsOpen = 0
    openCard1 = 0
    openCard2 = 0
    turn = 0
    #pass  
     
# define event handlers
def mouseclick(pos):
    global card_index, cardsOpen, openCard1, openCard2, turns
    turns += 1
        
    # determine index for cards
    card_index = pos[0] // 50
    
    # after clicking, add card into exposed list by index if it's already not there
    
    # do nothing if clicked on already exposed card
    if exposed[card_index] == True:
        return
    
    # if not exposed, then expose
    elif exposed[card_index] == False:
        exposed[card_index] = True
    
    # if no cards are exposed and you click on a card:
    # 1. the card must be set exposed
    # 2. set the state of openCards to 1
    # 3. assign the value of open card to the variable for later comparision
    
    if cardsOpen == 0:
        exposed[card_index] = True
        openCard1 = card_index
        cardsOpen = 1
        print "Logi: Esimese kaardi index ja v22rtus",card_index, deck[openCard1]
        print "Logi: Exposed", exposed
        print "Logi: State on",cardsOpen
        
        ################# remove the following later - this is for printing log:
        openCard2 = 0
    
    # if 1 card is open and you click on another card:
    # 1. the card must be set exposed
    # 2. set the state of openCards to 2
    # 3. assign the value of open card to the variable for later comparision
    
    elif cardsOpen == 1:
        exposed[card_index] = True
        openCard2 = card_index
        cardsOpen = 2
        print ""
        print "Logi: Esimese kaardi v22rtus",deck[openCard1]
        print "Logi: Teise kaardi index ja v22rtus",card_index, deck[openCard2]
        print "Logi: Exposed", exposed
        print "Logi: State on",cardsOpen
     
    # if 2 cards are opened and you click on another card:
    elif cardsOpen == 2:
        
        # if the last two are a match:
        if deck[openCard1] == deck[openCard2]:
            cardsOpen = 1
            print "MATCH"
            print ""
        
        # if they don't match, close last 2 cards_indexes -> set them = False
        elif openCard1 != openCard2:
            cardsOpen = 1
            print ""
            print "NO MATCH"
            exposed[openCard1] = False
            exposed[openCard2] = False
            openCard1 = card_index
        
        #for i in range(len(exposed)):
         #   deck[openCard1] = exposed[i]
            #exposed[i] = False
         #   deck[openCard2] = exposed[i]
            #exposed[i] = False

            
        
        openCard1 = card_index
        print "Logi: Esimese kaardi index ja v22rtus",card_index, deck[openCard1]
        #openCard2 = 0
        print "Logi: Teise kaardi index ja v22rtus",card_index, deck[openCard2]
        cardsOpen = 1
   
   
    # add game state logic here
                        
# cards are logically 50x100 pixels in size    
def draw(canvas):
    global card_index, turns
    
    # line positions
    line_pos1 = [25, 0]
    line_pos2 = [25, 100]
       
    
    # draw slots on canvas with thick lines
    for card in range(len(deck)):
        canvas.draw_line(line_pos1, line_pos2, 48, 'Green')
        line_pos1[0] += 50
        line_pos2[0] += 50
               
        # if card is in exposed list, then draw the card's value in the correct slot
        # card_index + 8 is for fine-tuning of the position of the number
        if exposed[card] == True:	
            canvas.draw_text(str(deck[card]), [8 + (card * 50), 70], 65, 'White', 'sans-serif')	
        
        
# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label(("Turns =", turns), 50)

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric
